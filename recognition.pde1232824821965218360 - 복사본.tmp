PImage getimage,cropimage,resizeimage,boyoung;
PrintWriter output;
int Max_Arr=9;
int x=0,y=0,w=0,h=0,offset=80,reoffset=80;
int sero = 60, garo = 30;
String image_name_final;
String image_name;



int[][] heightarray =
{{0,0,0,1,2,1,0,0,0},
 {0,0,0,0,1,0,0,0,0},
 {0,0,1,2,3,2,1,0,0},
 {0,1,2,3,4,3,2,1,0},
 {0,1,2,1,2,1,2,1,0},
 {0,0,1,2,3,2,1,0,0},
 {0,0,1,2,3,2,1,0,0},
 {0,0,0,1,2,1,0,0,0},
 {0,1,2,3,4,3,2,1,0},
 {0,0,1,2,3,2,1,0,0}
};

int[][] widtharray =
{{0,0,0,1,2,1,0,0,0},
 {0,0,0,0,1,0,0,0,0},
 {0,0,0,1,2,1,0,0,0},
 {0,0,1,2,1,2,1,0,0},
 {0,0,0,1,2,1,0,0,0},
 {0,0,0,0,1,0,0,0,0},
 {0,0,0,1,2,1,0,0,0},
 {0,0,0,1,2,1,0,0,0},
 {0,0,1,2,1,2,1,0,0},
 {0,0,1,2,3,2,1,0,0}
};

void garotracing(PImage img){
  int[] widthimage = new int[sero];
  int ang, prev_ang;
  for(int i = 0; i<sero; i++){
    ang = 0; prev_ang=0;
    for(int j = 0; j<garo; j++){
      int loc = j+(i*garo);
      prev_ang = ang;
      if(red(img.pixels[loc]) == 0) ang = 1;
      else ang = 0;
      if(ang==1 && prev_ang!=ang) widthimage[i]++;
    }
    output.print(widthimage[i]);
    output.print(" ");
  }
  array_churry_garo(widthimage);
}

void serotracing(PImage img){
  int[] heightimage = new int[garo];
  int ang, prev_ang;
  for(int i = 0; i<garo; i++){
    ang = 0; prev_ang=0;
    for(int j = 0; j<sero; j++){
      int loc = i+(j*garo);
      prev_ang = ang;
      if(red(img.pixels[loc]) == 0) ang = 1;
      else ang = 0;
      if(ang==1 && prev_ang!=ang) heightimage[i]++;
    }
    output.print(heightimage[i]);
    output.print(" ");
  }
  array_churry_sero(heightimage);
}

void array_churry_garo(int[] array){
  int ang=0, ang0=array[0], ang1=array[1], ang2 =array[2], ang3=array[3], j=1, k=0;
  int[] answer1 = new int[60];
  int[] answer2 = new int[60];
  output.println();
  output.print(image_name+"_garo_final ");
  
  answer1[0]=array[0];
  
  for(int i = 4; i<sero-1; i++){
    if(array[i]==ang3 && array[i]==ang2 && array[i]==ang1 && array[i] !=ang0) {
     answer1[j] = array[i];
     j++;
     ang3 = array[i]; ang2 = array[i-1]; ang1 = array[i-2]; ang0 = array[i-3];
    }
  }
  
  j++;
  answer1[j] = array[sero-1];
   for(int i = 0; i<=j; i++){
     if(ang!=answer1[i]) {
       answer2[k] = answer1[i];
       k++;
       ang = answer1[i];
     }
   }
   for(k=0;answer2[k]!=0;k++) {
    output.print(answer2[k]);
    output.print(" "); 
   }
   output.println();
}

void array_churry_sero(int[] array){
  int ang=0, j=0;
  int[] answer = new int[60];
  output.println();
  output.print(image_name+"_sero_final ");
   for(int i = 0; i<garo; i++){
     if(ang!=array[i]) {
       answer[j] = array[i];
       j++;
       ang = array[i];
     }
   }
   for(j=0;answer[j]!=0;j++) {
    output.print(answer[j]);
    output.print(" "); 
   }
   output.println();
}

void setup(){
  boyoung = loadImage("boyoung.jpg");
  output = createWriter("output.txt");
  for(int i=0;i<10;i++){
    for(int j=1;j<9;j++){
      String i_s=Integer.toString(i);
      String j_s=Integer.toString(j);
      image_name=i_s+"_"+j_s+".jpg";
      image_name_final=i_s+"_"+j_s+".png";
      getimage = loadImage(image_name);
      getxywh(getimage);
      cropimage = getimage.get(x,y,w,h);
      cropimage.resize(garo,sero);
      resizeimage=cropimage;
      recolor(resizeimage);
      output.print(image_name+"_garo ");
      garotracing(resizeimage);
      output.println();
      output.print(image_name+"_sero ");
      serotracing(resizeimage);
      output.println();
      output.println();
      resizeimage.save("final\\"+image_name_final);
      println(image_name_final+" done!");
     
    }
  }
  println(" ");
  println("All Done!!!");
  /*getimage =  loadImage("fuckimage.jpg");
  getxywh(getimage);
  cropimage = getimage.get(x,y,w,h);   
  cropimage.resize(garo,sero);
  resizeimage=cropimage;
  recolor(resizeimage);
  garotracing(resizeimage);
  serotracing(resizeimage);*/
  output.flush();
  output.close();
  size(960,768);
  background(boyoung);
}

void loop(){
 
}


boolean bnw(PImage img, int loc){
  float r = red(img.pixels[loc]);
  float g = green(img.pixels[loc]);
  float b = blue(img.pixels[loc]);
  r = constrain(r,0,255);
  g = constrain(g,0,255);
  b = constrain(b,0,255);
  if((r<offset)&&(g<offset)&&(b<offset)) return true;
  else return false;
}

boolean rebnw(PImage img, int loc){
  float r = red(img.pixels[loc]);
  float g = green(img.pixels[loc]);
  float b = blue(img.pixels[loc]);
  r = constrain(r,0,255);
  g = constrain(g,0,255);
  b = constrain(b,0,255);
  if((r<reoffset)&&(g<reoffset)&&(b<reoffset)) return true;
  else return false;
}

void recolor(PImage img){
  for(int i=0;i<img.width;i++){
    for(int j=0;j<img.height;j++){
      int loc = i+(j*img.width);
      if(rebnw(img,loc)) img.pixels[loc]=color(0);
      else img.pixels[loc]=color(255);
    }
}
}

void getxywh(PImage img){
  img.loadPixels();
  int i,j;
  boolean ang=false;
  for(i=0;i<img.width;i++){
    for(j=0;j<img.height;j++){
      int loc = i+(j*img.width);
      if(bnw(img,loc)) {
      x=i; ang=true; break;
    }
    }
    if(ang) break;
  }
  
  ang=false;
  
  for(i=img.width-1;i>x;i--){
    for(j=0;j<img.height;j++){
      int loc = i+(j*img.width);
      if(bnw(img,loc)) {
      w=i-x; ang=true; break;
    }
    }
    if(ang) break;
  }
  
  ang=false;
  
  for(j=0;j<img.height;j++){
    for(i=0;i<img.width;i++){
      int loc = i+(j*img.width);
      if(bnw(img,loc)) {
      y=j; ang=true; break;
    }
    }
    if(ang) break;
  }
  
  ang=false;
  
  for(j=img.height-1;j>y;j--){
    for(i=0;i<img.width;i++){
      int loc = i+(j*img.width);
      if(bnw(img,loc)) {
      h=j-y; ang=true; break;
    }
    }
    if(ang) break;
  }
  
  ang=false;
}
